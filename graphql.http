### Schema
POST {{u}}/graphql
sec-ch-ua: "Not.A/Brand";v="8", "Chromium";v="114", "Opera";v="100"
sec-ch-ua-platform: "macOS"
Referer:
sec-ch-ua-mobile: ?0
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 OPR/100.0.0.0
Content-Type: application/json

{"query":"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ","operationName":"IntrospectionQuery"}


### Signin
POST http://localhost:1606/graphql
Content-Type: application/json

{
  "query": "mutation SignIn($data: AuthInput!) {\n  signIn(data: $data) {\n    access_token\n  }\n}",
  "variables": {
    "data": {
      "wallet": "eH9js2vBZGCxb3MmweX9zkJDHp7DmJuZS31tTrQFw8e"
    }
  }
}

> {%
  res = response.body
  const {data} = res
  const { access_token } = data.signIn

  client.assert(access_token,"access_token is not empty")
  if (access_token){
    client.global.set('access_token',access_token)
  }

%}

### Boards

POST {{u}}/graphql
Authorization: Bearer {{access_token}}
Content-Type: application/json

{"query":"query Query {\n  boards {\n    id   \n name }\n}"}

### Boards with cookie

POST {{u}}/graphql
Content-Type: application/json

{"query":"query Query {\n  boards {\n    id   \n name }\n}"}



### Create Board

POST http://localhost:1606/graphql
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "query": "mutation Mutation($data: CreateBoardInput!) {\n  createBoard(data: $data) {\n    name\n    id\n    isActive\n    walletId\n  }\n}",
  "variables": {
    "data": {
      "name": "naaa",
      "isActive": false
    }
  }
}

###


